// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Transaction.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Corepb {

  /// <summary>Holder for reflection information generated from Transaction.proto</summary>
  public static partial class TransactionReflection {

    #region Descriptor
    /// <summary>File descriptor for Transaction.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TransactionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFUcmFuc2FjdGlvbi5wcm90bxIGY29yZXBiIiUKBERhdGESDAoEdHlwZRgB",
            "IAEoCRIPCgdwYXlsb2FkGAIgASgMItUBCgtUcmFuc2FjdGlvbhIMCgRoYXNo",
            "GAEgASgMEgwKBGZyb20YAiABKAwSCgoCdG8YAyABKAwSDQoFdmFsdWUYBCAB",
            "KAwSDQoFbm9uY2UYBSABKAQSEQoJdGltZXN0YW1wGAYgASgDEhoKBGRhdGEY",
            "ByABKAsyDC5jb3JlcGIuRGF0YRIQCghjaGFpbl9pZBgIIAEoDRIRCglnYXNf",
            "cHJpY2UYCSABKAwSEQoJZ2FzX2xpbWl0GAogASgMEgsKA2FsZxgLIAEoDRIM",
            "CgRzaWduGAwgASgMYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Corepb.Data), global::Corepb.Data.Parser, new[]{ "Type", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Corepb.Transaction), global::Corepb.Transaction.Parser, new[]{ "Hash", "From", "To", "Value", "Nonce", "Timestamp", "Data", "ChainId", "GasPrice", "GasLimit", "Alg", "Sign" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Data : pb::IMessage<Data> {
    private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Corepb.TransactionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data(Data other) : this() {
      type_ = other.type_;
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data Clone() {
      return new Data(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Data other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Corepb.TransactionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      hash_ = other.hash_;
      from_ = other.from_;
      to_ = other.to_;
      value_ = other.value_;
      nonce_ = other.nonce_;
      timestamp_ = other.timestamp_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      chainId_ = other.chainId_;
      gasPrice_ = other.gasPrice_;
      gasLimit_ = other.gasLimit_;
      alg_ = other.alg_;
      sign_ = other.sign_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private pb::ByteString from_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private pb::ByteString to_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 5;
    private ulong nonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 7;
    private global::Corepb.Data data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Corepb.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "chain_id" field.</summary>
    public const int ChainIdFieldNumber = 8;
    private uint chainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChainId {
      get { return chainId_; }
      set {
        chainId_ = value;
      }
    }

    /// <summary>Field number for the "gas_price" field.</summary>
    public const int GasPriceFieldNumber = 9;
    private pb::ByteString gasPrice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GasPrice {
      get { return gasPrice_; }
      set {
        gasPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gas_limit" field.</summary>
    public const int GasLimitFieldNumber = 10;
    private pb::ByteString gasLimit_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GasLimit {
      get { return gasLimit_; }
      set {
        gasLimit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alg" field.</summary>
    public const int AlgFieldNumber = 11;
    private uint alg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Alg {
      get { return alg_; }
      set {
        alg_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 12;
    private pb::ByteString sign_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Value != other.Value) return false;
      if (Nonce != other.Nonce) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (ChainId != other.ChainId) return false;
      if (GasPrice != other.GasPrice) return false;
      if (GasLimit != other.GasLimit) return false;
      if (Alg != other.Alg) return false;
      if (Sign != other.Sign) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Nonce != 0UL) hash ^= Nonce.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (ChainId != 0) hash ^= ChainId.GetHashCode();
      if (GasPrice.Length != 0) hash ^= GasPrice.GetHashCode();
      if (GasLimit.Length != 0) hash ^= GasLimit.GetHashCode();
      if (Alg != 0) hash ^= Alg.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(To);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Value);
      }
      if (Nonce != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Nonce);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Timestamp);
      }
      if (data_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Data);
      }
      if (ChainId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ChainId);
      }
      if (GasPrice.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(GasPrice);
      }
      if (GasLimit.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(GasLimit);
      }
      if (Alg != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Alg);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(Sign);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(To);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (Nonce != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nonce);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (ChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChainId);
      }
      if (GasPrice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GasPrice);
      }
      if (GasLimit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GasLimit);
      }
      if (Alg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Alg);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sign);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Nonce != 0UL) {
        Nonce = other.Nonce;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Corepb.Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.ChainId != 0) {
        ChainId = other.ChainId;
      }
      if (other.GasPrice.Length != 0) {
        GasPrice = other.GasPrice;
      }
      if (other.GasLimit.Length != 0) {
        GasLimit = other.GasLimit;
      }
      if (other.Alg != 0) {
        Alg = other.Alg;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 18: {
            From = input.ReadBytes();
            break;
          }
          case 26: {
            To = input.ReadBytes();
            break;
          }
          case 34: {
            Value = input.ReadBytes();
            break;
          }
          case 40: {
            Nonce = input.ReadUInt64();
            break;
          }
          case 48: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 58: {
            if (data_ == null) {
              data_ = new global::Corepb.Data();
            }
            input.ReadMessage(data_);
            break;
          }
          case 64: {
            ChainId = input.ReadUInt32();
            break;
          }
          case 74: {
            GasPrice = input.ReadBytes();
            break;
          }
          case 82: {
            GasLimit = input.ReadBytes();
            break;
          }
          case 88: {
            Alg = input.ReadUInt32();
            break;
          }
          case 98: {
            Sign = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
